{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import Login from\"./Login\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{// 모든 Hook을 최상단에서 호출\nconst[user,setUser]=useState(null);// 한국 시간 기준으로 오늘 날짜 계산\nconst getTodayDate=()=>{const now=new Date();const year=now.getFullYear();const month=String(now.getMonth()+1).padStart(2,'0');const day=String(now.getDate()).padStart(2,'0');return`${year}-${month}-${day}`;};const[selectedDate,setSelectedDate]=useState(getTodayDate());const[mood,setMood]=useState('');const[customMood,setCustomMood]=useState('');const[diaryEntry,setDiaryEntry]=useState('');const[feedback,setFeedback]=useState([]);const[diaryEntries,setDiaryEntries]=useState({});const[showCustomMoodInput,setShowCustomMoodInput]=useState(false);const[learningSummary,setLearningSummary]=useState('');// 로그인 상태 확인\nuseEffect(()=>{const savedUser=localStorage.getItem('user');if(savedUser){setUser(JSON.parse(savedUser));}},[]);// Load saved entries from localStorage\nuseEffect(()=>{if(user){// 로그인된 상태에서만 실행\nconst userKey=`diaryEntries_${user.nickname}`;const savedEntries=localStorage.getItem(userKey);if(savedEntries){var _parsedEntries$select;const parsedEntries=JSON.parse(savedEntries);setDiaryEntries(parsedEntries);// 현재 선택된 날짜의 데이터만 로드\nif((_parsedEntries$select=parsedEntries[selectedDate])!==null&&_parsedEntries$select!==void 0&&_parsedEntries$select.learningSummary){setLearningSummary(parsedEntries[selectedDate].learningSummary);}}else{// 새로운 사용자의 경우 빈 객체로 초기화\nsetDiaryEntries({});setLearningSummary('');}}},[user,selectedDate]);// selectedDate 의존성 다시 추가\n// 로그인 핸들러\nconst handleLogin=userData=>{setUser(userData);localStorage.setItem('user',JSON.stringify(userData));};// 로그아웃 핸들러\nconst handleLogout=()=>{setUser(null);localStorage.removeItem('user');// 사용자별 데이터는 유지 (다시 로그인할 수 있도록)\n};// 로그인 상태가 아니면 로그인 화면 표시\nif(!user){return/*#__PURE__*/_jsx(Login,{onLogin:handleLogin});}const moods=[{name:'Happy',emoji:'😊'},{name:'Sad',emoji:'😢'},{name:'Excited',emoji:'🎉'},{name:'Anxious',emoji:'😰'},{name:'Calm',emoji:'🧘'},{name:'Stressed',emoji:'😫'},{name:'Grateful',emoji:'🙏'},{name:'Tired',emoji:'😴'},{name:'Energetic',emoji:'⚡'},{name:'Hopeful',emoji:'🌟'},{name:'Frustrated',emoji:'😤'},{name:'Content',emoji:'😌'},{name:'Lonely',emoji:'😔'},{name:'Inspired',emoji:'💡'},{name:'Bored',emoji:'🥱'},{name:'Confident',emoji:'💪'},{name:'Nervous',emoji:'😬'},{name:'Peaceful',emoji:'🕊️'},{name:'Overwhelmed',emoji:'😵'},{name:'Curious',emoji:'🔍'},{name:'Relieved',emoji:'😅'},{name:'Disappointed',emoji:'😞'},{name:'Proud',emoji:'🏆'},{name:'Ashamed',emoji:'😳'},{name:'Optimistic',emoji:'☀️'},{name:'Pessimistic',emoji:'🌧️'},{name:'Motivated',emoji:'🚀'},{name:'Drained',emoji:'🔋'},{name:'Playful',emoji:'🎈'},{name:'Serious',emoji:'👔'}];// Save entries to localStorage with user-specific key\nconst saveEntries=entries=>{setDiaryEntries(entries);try{const userKey=`diaryEntries_${user.nickname}`;localStorage.setItem(userKey,JSON.stringify(entries));}catch(e){console.warn('Could not save to localStorage',e);}};const detectKoreanWords=text=>{const koreanRegex=/[\\uAC00-\\uD7A3]/;const words=text.split(/\\s+/);const koreanWords=[];words.forEach(word=>{const cleanWord=word.replace(/[.,!?;:()\"'-]/g,'');if(koreanRegex.test(cleanWord)&&cleanWord.length>1){koreanWords.push(cleanWord);}});return koreanWords;};const suggestEnglishEquivalent=koreanWord=>{const dictionary={'평영':'breaststroke','배영':'backstroke','자유형':'freestyle','접영':'butterfly stroke','밥':'meal','점심':'lunch','아침':'breakfast','저녁':'dinner','학교':'school','회사':'office','친구':'friend','가족':'family','엄마':'mom','아빠':'dad','형':'older brother','누나':'older sister','오빠':'older brother (female speaker)','언니':'older sister (female speaker)','선생님':'teacher','학생':'student','운동':'exercise','공부':'study','놀이':'play','여행':'trip','휴가':'vacation','생일':'birthday','결혼':'marriage','이별':'breakup','사랑':'love','기쁨':'joy','슬픔':'sadness','화남':'anger','두려움':'fear'};return dictionary[koreanWord]||null;};const analyzeSentence=(sentence,index)=>{const feedbackItems=[];let processedSentence=sentence.trim();if(!processedSentence)return feedbackItems;const originalSentence=processedSentence;let hasChanges=false;let reasons=[];// 배열로 변경하여 각 오류별로 구분\n// 1. Check for Korean words in English text\nconst koreanWords=detectKoreanWords(processedSentence);if(koreanWords.length>0){koreanWords.forEach(koreanWord=>{const englishEquivalent=suggestEnglishEquivalent(koreanWord);if(englishEquivalent){processedSentence=processedSentence.replace(koreanWord,englishEquivalent);hasChanges=true;reasons.push(`• '${koreanWord}'을(를) '${englishEquivalent}'로 바꾸세요.\\n  영어 일기에서는 영어 표현을 사용하는 것이 좋아요.`);}else{reasons.push(`• '${koreanWord}'은(는) 한국어 단어예요.\\n  영어 표현을 찾아서 사용해보세요.`);}});}// 2. Fix \"to do\" grammar errors (to did, to went, etc.)\nconst toInfinitiveErrors={'to did':'to do','to went':'to go','to saw':'to see','to ate':'to eat','to drank':'to drink','to wrote':'to write','to slept':'to sleep','to felt':'to feel','to bought':'to buy','to brought':'to bring','to thought':'to think','to caught':'to catch','to knew':'to know','to took':'to take','to came':'to come'};Object.entries(toInfinitiveErrors).forEach(_ref=>{let[incorrect,correct]=_ref;const regex=new RegExp(`\\\\b${incorrect}\\\\b`,'gi');if(regex.test(processedSentence)){processedSentence=processedSentence.replace(regex,correct);hasChanges=true;reasons.push(`• '${incorrect}' → '${correct}': 'to' 뒤에는 동사의 원형을 사용해야 해요.\\n  예: to do, to go, to see, to eat`);}});// 3. Fix common verb tense errors in context (but avoid affecting \"to do\" patterns)\nconst contextBasedTenseFixes={'I am go':'I am going','I am went':'I went','I am do':'I am doing','I am did':'I did','I am eat':'I am eating','I am ate':'I ate','I am see':'I am seeing','I am saw':'I saw','I am have':'I have','I am had':'I had','I am get':'I am getting','I am got':'I got','I am make':'I am making','I am made':'I made','I am take':'I am taking','I am took':'I took','I am come':'I am coming','I am came':'I came'};Object.entries(contextBasedTenseFixes).forEach(_ref2=>{let[incorrect,correct]=_ref2;const regex=new RegExp(`\\\\b${incorrect}\\\\b`,'gi');if(regex.test(processedSentence)){processedSentence=processedSentence.replace(regex,correct);hasChanges=true;reasons.push(`• '${incorrect}' → '${correct}': 'am' 뒤에는 동사의 -ing 형태나 과거형을 사용해야 해요.\\n  현재진행형: I am going, I am eating\\n  과거형: I went, I ate`);}});// 4. Check if sentence starts with lowercase letter\nif(processedSentence.length>0&&processedSentence[0]===processedSentence[0].toLowerCase()&&/^[a-z]/.test(processedSentence)){processedSentence=processedSentence.charAt(0).toUpperCase()+processedSentence.slice(1);hasChanges=true;reasons.push(`• 문장은 대문자로 시작해야 해요.\\n  예: \"i went to school\" → \"I went to school\"`);}// 5. Check if sentence starts with conjunction\nconst conjunctions=['and','but','or','so','because','although','though','since','while'];const firstWord=processedSentence.split(' ')[0].toLowerCase().replace(/[.,!?;:]/g,'');if(conjunctions.includes(firstWord)){const words=processedSentence.split(' ');words.shift();processedSentence=words.join(' ');if(processedSentence.length>0){processedSentence=processedSentence.charAt(0).toUpperCase()+processedSentence.slice(1);}hasChanges=true;reasons.push(`• 문장을 접속사('${firstWord}')로 시작하지 마세요.\\n  접속사는 두 문장을 연결할 때 사용해요.\\n  예: \"I was tired. So I went to bed early.\"`);}// 6. Check for comma splice\nif(processedSentence.includes(',')&&(processedSentence.includes(' I ')||processedSentence.includes(' He ')||processedSentence.includes(' She ')||processedSentence.includes(' It ')||processedSentence.includes(' We ')||processedSentence.includes(' They '))){const commaIndex=processedSentence.indexOf(',');const afterComma=processedSentence.substring(commaIndex+1).trim();if(afterComma.length>0&&/^[A-Z][a-z]/.test(afterComma)){processedSentence=processedSentence.substring(0,commaIndex)+'. '+afterComma.charAt(0).toUpperCase()+afterComma.slice(1);hasChanges=true;reasons.push(`• 쉼표로 두 개의 완전한 문장을 연결하지 마세요.\\n  마침표로 나누거나 접속사를 사용하세요.\\n  예: \"I was tired, I went to bed\" → \"I was tired. I went to bed\"`);}}// 7. Check for missing space after punctuation\nif(/[.,!?;:][a-zA-Z]/.test(processedSentence)){processedSentence=processedSentence.replace(/([.,!?;:])([a-zA-Z])/g,'$1 $2');hasChanges=true;reasons.push(`• 구두점 뒤에는 공백을 넣어야 해요.\\n  예: \"I went to school.It was fun.\" → \"I went to school. It was fun.\"`);}// 8. Check for inappropriate use of present tense for past events\nconst irregularPastForms={'go':'went','see':'saw','do':'did','have':'had','get':'got','make':'made','say':'said','know':'knew','take':'took','come':'came','eat':'ate','drink':'drank','write':'wrote','read':'read','sleep':'slept','feel':'felt','buy':'bought','bring':'brought','think':'thought','catch':'caught'};Object.entries(irregularPastForms).forEach(_ref3=>{let[present,past]=_ref3;// \"to do\" 패턴을 건드리지 않도록 예외 처리\nconst regex=new RegExp(`\\\\b${present}\\\\b`,'gi');if(regex.test(processedSentence)&&!processedSentence.match(/\\b(am|is|are|was|were|been|being)\\b/gi)){const timeIndicators=['today','yesterday','morning','afternoon','evening','night','last','ago'];const hasTimeIndicator=timeIndicators.some(indicator=>processedSentence.toLowerCase().includes(indicator));// \"to do\" 패턴이 있는 경우 건드리지 않음\nconst hasToDoPattern=processedSentence.toLowerCase().includes(`to ${present}`);if((hasTimeIndicator||!processedSentence.match(/\\b(now|currently|right now|these days)\\b/gi))&&!hasToDoPattern){processedSentence=processedSentence.replace(regex,past);hasChanges=true;reasons.push(`• 과거 일을 서술할 때는 '${present}' → '${past}'를 사용하세요.\\n  일기에서는 일반적으로 과거형을 사용해요.\\n  예: \"I go to school\" → \"I went to school\"`);}}});// 9. Check for incorrect adjective usage with feelings\nconst feelingAdjectives={'frustrating':'frustrated','exciting':'excited','boring':'bored','tiring':'tired','surprising':'surprised','interesting':'interested','confusing':'confused','amazing':'amazed','shocking':'shocked','disappointing':'disappointed','satisfying':'satisfied','worrying':'worried','terrifying':'terrified','pleasing':'pleased','annoying':'annoyed'};Object.entries(feelingAdjectives).forEach(_ref4=>{let[ingForm,edForm]=_ref4;const regex=new RegExp(`\\\\bI\\\\s+(am|was|feel|felt)\\\\s+${ingForm}\\\\b`,'gi');if(regex.test(processedSentence)){processedSentence=processedSentence.replace(regex,match=>{return match.replace(new RegExp(`${ingForm}`,'i'),edForm);});hasChanges=true;reasons.push(`• 기분 표현에는 '${ingForm}' → '${edForm}'를 사용하세요.\\n  -ing: 어떤 것이 그 기분을 주는지 (The movie was exciting)\\n  -ed: 당신이 그 기분을 느낄 때 (I was excited)`);}});// 10. Replace informal expressions with more formal ones\nconst informalToFormal={'a lot':'significantly','kind of':'somewhat','sort of':'rather','gonna':'going to','wanna':'want to','gotta':'have to','pretty':'quite','really':'very','very very':'extremely','super':'extremely','awesome':'excellent','cool':'great','bad':'poor','stuff':'things','get':'obtain or become','make':'create or cause'};Object.entries(informalToFormal).forEach(_ref5=>{let[informal,formal]=_ref5;const regex=new RegExp(`\\\\b${informal}\\\\b`,'gi');if(regex.test(processedSentence)){processedSentence=processedSentence.replace(regex,formal);hasChanges=true;reasons.push(`• '${informal}' → '${formal}': 더 정교한 표현을 사용하세요.\\n  비형식적 표현보다 형식적인 표현이 일기에 적합해요.`);}});// 11. Improve vague expressions (moved to end to avoid conflicts)\nif(processedSentence.toLowerCase().includes('thing')||processedSentence.toLowerCase().includes('things')){processedSentence=processedSentence.replace(/\\bthing\\b/gi,'item or activity');processedSentence=processedSentence.replace(/\\bthings\\b/gi,'various activities or items');hasChanges=true;reasons.push(`• 'thing/things' → 더 구체적인 표현을 사용하세요.\\n  모호한 표현보다 구체적인 설명이 좋아요.\\n  예: \"I did many things\" → \"I did various activities\"`);}// 12. Fix run-on sentences\nconst longSentenceWords=processedSentence.split(' ');if(longSentenceWords.length>25&&!processedSentence.includes('.')){const breakPoint=Math.floor(longSentenceWords.length*0.6);const firstPart=longSentenceWords.slice(0,breakPoint).join(' ');const secondPart=longSentenceWords.slice(breakPoint).join(' ');processedSentence=`${firstPart}. ${secondPart.charAt(0).toUpperCase()+secondPart.slice(1)}`;hasChanges=true;reasons.push(`• 긴 문장을 두 개로 나누세요.\\n  15-20단어를 넘는 문장은 피하는 것이 좋아요.\\n  문장을 나누면 더 명확하게 표현할 수 있어요.`);}// 13. Check for common article errors\nconst commonNouns=['school','work','home','bed','hospital','church','college','university'];commonNouns.forEach(noun=>{const regex=new RegExp(`\\\\bthe\\\\s+${noun}\\\\b`,'gi');if(regex.test(processedSentence)&&!processedSentence.match(/\\b(in|at|to|from) the\\b/gi)){const noArticleContexts=['go to','be at','come from','arrive at'];const hasNoArticleContext=noArticleContexts.some(context=>processedSentence.toLowerCase().includes(context));if(hasNoArticleContext){processedSentence=processedSentence.replace(regex,noun);hasChanges=true;reasons.push(`• 'the ${noun}' → '${noun}': 일부 장소명사는 'the' 없이 사용해요.\\n  예: go to school, be at work, go home`);}}});// 14. Check for missing articles before singular countable nouns\nconst countableNouns=['book','movie','car','house','friend','teacher','student','dog','cat','phone','computer','table','chair','window','door'];countableNouns.forEach(noun=>{const regex=new RegExp(`\\\\b${noun}\\\\b`,'gi');if(regex.test(processedSentence)){const beforeNoun=processedSentence.substring(0,processedSentence.toLowerCase().indexOf(noun.toLowerCase()));const afterNoun=processedSentence.substring(processedSentence.toLowerCase().indexOf(noun.toLowerCase())+noun.length);// Check if there's already an article before the noun\nconst hasArticle=/\\b(a|an|the|my|your|his|her|its|our|their)\\s+$/i.test(beforeNoun);const isPlural=/\\b\\w+s\\b/i.test(processedSentence);if(!hasArticle&&!isPlural&&!beforeNoun.match(/\\b(in|at|on|to|from|with|by|for|of)\\s+$/i)){const vowelSound=/^[aeiou]/i.test(noun);const article=vowelSound?'an':'a';processedSentence=processedSentence.replace(regex,`${article} ${noun}`);hasChanges=true;reasons.push(`• '${noun}' → '${article} ${noun}': 단수 가산명사 앞에는 관사를 사용하세요.\\n  예: a book, an apple, the car`);}}});// 15. Check for double negatives\nif(processedSentence.toLowerCase().includes('not')&&(processedSentence.toLowerCase().includes('no')||processedSentence.toLowerCase().includes('never')||processedSentence.toLowerCase().includes('nothing')||processedSentence.toLowerCase().includes('nobody'))){processedSentence=processedSentence.replace(/\\bnot\\b/gi,'');processedSentence=processedSentence.replace(/\\s+/g,' ').trim();hasChanges=true;reasons.push(`• 이중 부정을 피하세요.\\n  'not'과 'no/never' 등을 함께 사용하지 마세요.\\n  예: \"I don't have no money\" → \"I have no money\"`);}// 16. If we've made changes, add feedback item\nif(hasChanges){feedbackItems.push({original:originalSentence,suggestion:processedSentence,reason:reasons.join('\\n\\n')// 각 피드백 사이에 빈 줄 추가\n});}// If no changes but sentence is reasonably long, provide constructive feedback\nelse if(originalSentence.length>15){feedbackItems.push({original:originalSentence,suggestion:originalSentence,reason:\"• 문장이 아주 잘 작성되었어요!\\n\\n• 더 나은 표현을 위해 다음을 시도해보세요:\\n  - 더 정교한 어휘 사용\\n  - 다양한 문장 구조 사용\\n  - 구체적인 설명 추가\"});}return feedbackItems;};const generateFeedback=text=>{if(!text.trim())return[];const sentences=text.split(/[.!?]+/).filter(sentence=>sentence.trim().length>0);const allFeedback=[];sentences.forEach((sentence,index)=>{const feedback=analyzeSentence(sentence,index);allFeedback.push(...feedback);});// Add contextual suggestions based on the overall text\nif(allFeedback.length===0&&text.length>50){const contextualSuggestions=generateContextualSuggestions(text);allFeedback.push(...contextualSuggestions);}return allFeedback.slice(0,5);// Limit to 5 feedback items\n};const generateContextualSuggestions=text=>{const suggestions=[];const lowerText=text.toLowerCase();// Check for repetitive sentence structures\nconst sentences=text.split(/[.!?]+/).filter(s=>s.trim().length>10);const sentenceStarts=sentences.map(s=>s.trim().split(' ')[0].toLowerCase());const startCounts={};sentenceStarts.forEach(start=>{startCounts[start]=(startCounts[start]||0)+1;});const repetitiveStart=Object.entries(startCounts).find(_ref6=>{let[word,count]=_ref6;return count>2;});if(repetitiveStart){suggestions.push({original:`문장들이 '${repetitiveStart[0]}'로 시작하는 경우가 많아요.`,suggestion:\"다양한 문장 시작을 시도해보세요: 'I', 'The', 'It', 'There', 'This', 'That' 등을 활용하면 더 흥미로운 글이 됩니다.\",reason:\"• 같은 단어로 문장을 시작하면 글의 흐름이 단조로워져요.\\n\\n• 다양한 문장 구조를 사용하면 더 자연스럽고 읽기 쉬운 글이 됩니다.\\n\\n• 예시:\\n  - I went to school today.\\n  - The weather was beautiful.\\n  - It was a great day.\\n  - There were many people.\\n  - This experience taught me a lot.\"});}// Check for vocabulary variety\nconst words=lowerText.split(/\\s+/).filter(word=>word.length>3);const wordCounts={};words.forEach(word=>{wordCounts[word]=(wordCounts[word]||0)+1;});const overusedWords=Object.entries(wordCounts).filter(_ref7=>{let[word,count]=_ref7;return count>3;});if(overusedWords.length>0){const word=overusedWords[0][0];const alternatives=getWordAlternatives(word);if(alternatives.length>0){suggestions.push({original:`'${word}' 단어를 여러 번 사용했어요.`,suggestion:`다른 표현을 시도해보세요: ${alternatives.join(', ')}`,reason:\"• 같은 단어를 반복 사용하면 글의 표현력이 떨어져요.\\n\\n• 다양한 동의어를 사용하면 더 풍부한 표현이 가능합니다.\\n\\n• 문맥에 맞는 적절한 단어를 선택하세요.\"});}}// Check for text length and structure\nif(text.length<100){suggestions.push({original:\"일기가 조금 짧아요.\",suggestion:\"더 자세한 설명을 추가해보세요: 언제, 어디서, 누구와, 무엇을, 어떻게, 왜에 대한 정보를 포함하면 더 풍부한 일기가 됩니다.\",reason:\"• 짧은 일기보다는 구체적인 세부사항을 포함한 긴 일기가 영어 학습에 더 도움이 됩니다.\\n\\n• 5W1H(언제, 어디서, 누구와, 무엇을, 어떻게, 왜)를 고려해서 작성해보세요.\\n\\n• 예시:\\n  - 언제: Yesterday morning, Last weekend\\n  - 어디서: at the park, in the library\\n  - 누구와: with my friends, alone\\n  - 무엇을: studied English, watched a movie\\n  - 어떻게: carefully, quickly, slowly\\n  - 왜: because I wanted to learn, since it was interesting\"});}return suggestions;};const getWordAlternatives=word=>{const alternatives={'good':['excellent','great','wonderful','fantastic','amazing','outstanding'],'bad':['terrible','awful','horrible','dreadful','poor','disappointing'],'big':['large','huge','enormous','massive','gigantic','substantial'],'small':['tiny','little','miniature','petite','compact','modest'],'happy':['joyful','delighted','pleased','content','cheerful','elated'],'sad':['unhappy','depressed','melancholy','gloomy','sorrowful','down'],'tired':['exhausted','weary','fatigued','drained','worn out','sleepy'],'angry':['furious','mad','irritated','annoyed','upset','frustrated'],'scared':['afraid','frightened','terrified','panicked','nervous','worried'],'surprised':['shocked','amazed','astonished','stunned','bewildered','startled'],'like':['enjoy','love','appreciate','adore','fancy','prefer'],'dislike':['hate','detest','loathe','abhor','despise','can\\'t stand'],'say':['tell','speak','talk','mention','explain','describe'],'go':['visit','travel','head','move','proceed','journey'],'come':['arrive','reach','approach','appear','show up','turn up'],'see':['watch','observe','notice','spot','witness','view'],'think':['believe','consider','suppose','imagine','assume','feel'],'know':['understand','realize','recognize','comprehend','grasp','see'],'want':['desire','wish','hope','need','require','would like'],'get':['obtain','receive','acquire','gain','achieve','attain']};return alternatives[word]||[];};const handleSubmit=e=>{e.preventDefault();const currentMood=customMood||mood;if(!currentMood||!diaryEntry.trim()){alert('기분을 선택하고 일기 내용을 작성해주세요.');return;}const newEntry={mood:currentMood,entry:diaryEntry,feedback:generateFeedback(diaryEntry),learningSummary:learningSummary};const updatedEntries={...diaryEntries,[selectedDate]:newEntry};saveEntries(updatedEntries);setFeedback(newEntry.feedback);};const handleDateChange=date=>{setSelectedDate(date);const entry=diaryEntries[date];if(entry){setMood(entry.mood);setCustomMood('');setDiaryEntry(entry.entry);setFeedback(entry.feedback||[]);setLearningSummary(entry.learningSummary||'');}else{setMood('');setCustomMood('');setDiaryEntry('');setFeedback([]);setLearningSummary('');}};const handleMoodSelect=selectedMood=>{setMood(selectedMood);setCustomMood('');setShowCustomMoodInput(false);};const handleCustomMood=()=>{setShowCustomMoodInput(true);setMood('');};const handleLearningSummaryChange=e=>{setLearningSummary(e.target.value);if(diaryEntries[selectedDate]){const updatedEntries={...diaryEntries,[selectedDate]:{...diaryEntries[selectedDate],learningSummary:e.target.value}};saveEntries(updatedEntries);}};const renderCalendar=()=>{const today=new Date();const year=today.getFullYear();const month=today.getMonth();const firstDay=new Date(year,month,1);const lastDay=new Date(year,month+1,0);const startDate=new Date(firstDay);startDate.setDate(startDate.getDate()-firstDay.getDay());const days=[];const currentDate=new Date(startDate);for(let i=0;i<42;i++){const day=new Date(currentDate);// 한국 시간 기준으로 날짜 문자열 생성\nconst year=day.getFullYear();const month=String(day.getMonth()+1).padStart(2,'0');const date=String(day.getDate()).padStart(2,'0');const dateStr=`${year}-${month}-${date}`;const hasEntry=diaryEntries[dateStr];days.push(/*#__PURE__*/_jsxs(\"div\",{className:`p-2 text-center cursor-pointer rounded transition-all duration-200 ${day.getMonth()===month-1?'text-gray-700 hover:bg-blue-50':'text-gray-400'} ${dateStr===selectedDate?'bg-blue-500 text-white font-semibold':hasEntry?'bg-green-100 hover:bg-green-200':'hover:bg-gray-100'}`,onClick:()=>handleDateChange(dateStr),children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm\",children:day.getDate()}),hasEntry&&/*#__PURE__*/_jsx(\"div\",{className:\"w-1 h-1 bg-green-500 rounded-full mx-auto mt-1\"})]},i));currentDate.setDate(currentDate.getDate()+1);}return days;};return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container mx-auto px-4 py-8 max-w-6xl\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"text-center mb-8 flex flex-col items-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-4xl font-bold text-gray-800 mb-2\",children:\"\\uC77C\\uAE30\\uC7A5 \\uD83D\\uDCD4\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-600 mb-2\",children:\"\\uC601\\uC5B4\\uB85C \\uC77C\\uAE30\\uB97C \\uC4F0\\uACE0 \\uCE5C\\uC808\\uD55C \\uC120\\uC0DD\\uB2D8\\uCC98\\uB7FC \\uD53C\\uB4DC\\uBC31\\uC744 \\uBC1B\\uC544\\uBCF4\\uC138\\uC694\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-4 mt-2\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"text-blue-700 font-semibold\",children:[user.nickname,\"\\uB2D8 \\uD658\\uC601\\uD569\\uB2C8\\uB2E4!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm\",children:\"\\uB85C\\uADF8\\uC544\\uC6C3\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-3 gap-8\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"lg:col-span-1 space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold text-gray-800 mb-4\",children:\"\\uD83D\\uDCC5 \\uB2EC\\uB825\"}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-7 gap-1 mb-4\",children:['일','월','화','수','목','금','토'].map(day=>/*#__PURE__*/_jsx(\"div\",{className:\"p-2 text-center text-sm font-medium text-gray-500\",children:day},day))}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-7 gap-1\",children:renderCalendar()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold text-gray-800 mb-4\",children:\"\\uD83D\\uDE0A \\uC624\\uB298\\uC758 \\uAE30\\uBD84\"}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-2 gap-2 mb-4 max-h-60 overflow-y-auto\",children:moods.map(moodItem=>/*#__PURE__*/_jsxs(\"button\",{onClick:()=>handleMoodSelect(moodItem.name),className:`p-2 text-sm rounded-lg transition-all duration-200 flex items-center gap-2 ${mood===moodItem.name?'bg-blue-500 text-white font-medium':'bg-gray-100 text-gray-700 hover:bg-gray-200'}`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-lg\",children:moodItem.emoji}),/*#__PURE__*/_jsx(\"span\",{children:moodItem.name})]},moodItem.name))}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleCustomMood,className:\"w-full p-2 text-sm text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors duration-200 flex items-center justify-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\u2795\"}),\" \\uC9C1\\uC811 \\uAE30\\uBD84 \\uC785\\uB825\\uD558\\uAE30\"]}),showCustomMoodInput&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:customMood,onChange:e=>setCustomMood(e.target.value),placeholder:\"\\uAE30\\uBD84\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694...\",className:\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"lg:col-span-2 space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold text-gray-800 mb-2\",children:new Date(selectedDate).toLocaleDateString('ko-KR',{weekday:'long',year:'numeric',month:'long',day:'numeric'})}),diaryEntries[selectedDate]&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[\"\\uAE30\\uBD84: \",/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-blue-600\",children:diaryEntries[selectedDate].mood})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold text-gray-800 mb-4\",children:\"\\u270F\\uFE0F \\uC624\\uB298\\uC758 \\uC77C\\uAE30\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"space-y-4\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:diaryEntry,onChange:e=>setDiaryEntry(e.target.value),placeholder:`Today was a great day. \nI went to the park with my friends. \nWe had a wonderful time together.`,className:\"w-full h-64 p-4 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700 placeholder-gray-400 font-medium\",style:{fontFamily:'Georgia, Cambria, \"Times New Roman\", Times, serif'}}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-500\",children:\"\\uC77C\\uAE30\\uB97C \\uC4F8 \\uB54C \\uB2E4\\uC74C\\uC744 \\uCC38\\uACE0\\uD574\\uBCF4\\uC138\\uC694: \\uC624\\uB298\\uC758 \\uAE30\\uBD84, \\uD588\\uB358 \\uC77C, \\uB9CC\\uB09C \\uC0AC\\uB78C, \\uB290\\uB080 \\uC810, \\uB0B4\\uC77C\\uC758 \\uACC4\\uD68D \\uB4F1\\uC5D0 \\uB300\\uD574 \\uC790\\uC720\\uB86D\\uAC8C \\uC601\\uC5B4\\uB85C \\uC791\\uC131\\uD574\\uBCF4\\uC138\\uC694. \\uC644\\uBCBD\\uD55C \\uBB38\\uC7A5\\uC744 \\uC4F0\\uB824\\uACE0 \\uC560\\uC4F0\\uAE30\\uBCF4\\uB2E4\\uB294 \\uC790\\uC720\\uB86D\\uAC8C \\uD45C\\uD604\\uD558\\uB294 \\uB370 \\uC9D1\\uC911\\uD574\\uBCF4\\uC138\\uC694!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-end\",children:/*#__PURE__*/_jsxs(\"button\",{type:\"submit\",className:\"px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 font-medium flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\u2705\"}),\" \\uC800\\uC7A5\\uD558\\uACE0 \\uD53C\\uB4DC\\uBC31 \\uBC1B\\uAE30\"]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold text-gray-800 mb-4\",children:\"\\uD83E\\uDD16 AI \\uC120\\uC0DD\\uB2D8\\uC758 \\uD53C\\uB4DC\\uBC31\"}),feedback.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"space-y-6\",children:feedback.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"border-l-4 border-blue-400 pl-4 py-3 bg-blue-50 rounded-r-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"inline-block bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded mb-2\",children:[\"\\uD83D\\uDCAC \\uD53C\\uB4DC\\uBC31 #\",index+1]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-gray-700\",children:\"\\uD83D\\uDCDD \\uC6D0\\uBB38:\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-800 mt-1 bg-white p-2 rounded border\",children:item.original})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-gray-700\",children:\"\\u2728 \\uAC1C\\uC120 \\uC81C\\uC548:\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-green-800 mt-1 bg-white p-2 rounded border font-medium\",children:item.suggestion})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-gray-700\",children:\"\\uD83D\\uDCD8 \\uC0C1\\uC138 \\uC124\\uBA85:\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-700 mt-1 text-sm leading-relaxed bg-white p-3 rounded border border-gray-200 whitespace-pre-line\",children:item.reason})]})]},index))}):/*#__PURE__*/_jsxs(\"div\",{className:\"text-gray-500 italic text-center py-8 bg-gray-50 rounded-lg\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-4xl mb-2\",children:\"\\uD83D\\uDC4B\"}),\"\\uC77C\\uAE30\\uB97C \\uC791\\uC131\\uD558\\uACE0 \\\"\\uC800\\uC7A5\\uD558\\uACE0 \\uD53C\\uB4DC\\uBC31 \\uBC1B\\uAE30\\\" \\uBC84\\uD2BC\\uC744 \\uD074\\uB9AD\\uD558\\uBA74,\",/*#__PURE__*/_jsx(\"br\",{}),\"\\uCE5C\\uC808\\uD55C AI \\uC120\\uC0DD\\uB2D8\\uC774 \\uBB38\\uC7A5\\uBCC4\\uB85C \\uC0C1\\uC138\\uD55C \\uD53C\\uB4DC\\uBC31\\uC744 \\uC81C\\uACF5\\uD574\\uB4DC\\uB824\\uC694!\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold text-gray-800 mb-4\",children:\"\\uD83C\\uDF1F \\uC624\\uB298\\uC758 \\uD559\\uC2B5 \\uC815\\uB9AC\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-4 text-sm\",children:\"\\uC624\\uB298 \\uC77C\\uAE30 \\uC791\\uC131\\uACFC \\uD53C\\uB4DC\\uBC31\\uC744 \\uD1B5\\uD574 \\uBC30\\uC6B4 \\uB0B4\\uC6A9\\uC744 \\uAC04\\uB2E8\\uD788 \\uC815\\uB9AC\\uD574\\uBCF4\\uC138\\uC694. \\uC774\\uB294 \\uB2F9\\uC2E0\\uC758 \\uD559\\uC2B5 \\uC5EC\\uC815\\uC744 \\uB418\\uB3CC\\uC544\\uBCF4\\uB294 \\uB370 \\uD070 \\uB3C4\\uC6C0\\uC774 \\uB429\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsx(\"textarea\",{value:learningSummary,onChange:handleLearningSummaryChange,placeholder:\"\\uC608: \\uC624\\uB298\\uC740 \\uACFC\\uAC70\\uD615 \\uB3D9\\uC0AC \\uC0AC\\uC6A9\\uBC95\\uACFC \\uBB38\\uC7A5\\uC744 \\uC790\\uC5F0\\uC2A4\\uB7FD\\uAC8C \\uC5F0\\uACB0\\uD558\\uB294 \\uBC29\\uBC95\\uC744 \\uBC30\\uC6E0\\uC5B4\\uC694. \\uD2B9\\uD788 'and'\\uB85C \\uBB38\\uC7A5\\uC744 \\uC2DC\\uC791\\uD558\\uB294 \\uAC83\\uC744 \\uD53C\\uD558\\uACE0, \\uB300\\uC2E0 \\uB9C8\\uCE68\\uD45C\\uB098 \\uC811\\uC18D\\uC0AC\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC774 \\uB354 \\uC790\\uC5F0\\uC2A4\\uB7FD\\uB2E4\\uB294 \\uAC83\\uC744 \\uC54C\\uAC8C \\uB418\\uC5C8\\uC5B4\\uC694.\",className:\"w-full h-32 p-4 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700 placeholder-gray-400\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-xs text-gray-500 mt-2\",children:\"\\uD83D\\uDCA1 \\uD301: \\uAD6C\\uCCB4\\uC801\\uC778 \\uC608\\uC2DC\\uC640 \\uD568\\uAED8 \\uC815\\uB9AC\\uD558\\uBA74 \\uAE30\\uC5B5\\uC5D0 \\uB354 \\uC624\\uB798 \\uB0A8\\uC544\\uC694!\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 bg-white rounded-xl shadow-lg p-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-gray-800 mb-3\",children:\"\\u2728 \\uC0AC\\uC6A9 \\uD301:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-semibold text-blue-600 mb-2\",children:\"\\u2713 \\uAE30\\uBD84 \\uC120\\uD0DD:\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"list-disc list-inside text-gray-600 space-y-1\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"\\uAC01 \\uAC10\\uC815 \\uC606\\uC5D0 \\uD574\\uB2F9\\uD558\\uB294 \\uC774\\uBAA8\\uC9C0\\uAC00 \\uC788\\uC5B4\\uC694\"}),/*#__PURE__*/_jsx(\"li\",{children:\"\\uAE30\\uBD84\\uC774 \\uC815\\uD655\\uD788 \\uB9DE\\uC9C0 \\uC54A\\uC73C\\uBA74 \\uC9C1\\uC811 \\uC785\\uB825\\uD560 \\uC218 \\uC788\\uC5B4\\uC694\"}),/*#__PURE__*/_jsx(\"li\",{children:\"\\uB2EC\\uB825\\uC5D0\\uC11C \\uCD08\\uB85D\\uC0C9 \\uC810\\uC740 \\uC77C\\uAE30\\uB97C \\uC4F4 \\uB0A0\\uC9DC\\uB97C \\uC758\\uBBF8\\uD574\\uC694\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-semibold text-blue-600 mb-2\",children:\"\\u2713 \\uC77C\\uAE30 \\uC791\\uC131:\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"list-disc list-inside text-gray-600 space-y-1\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"\\uD55C\\uAE00\\uACFC \\uC601\\uC5B4\\uB97C \\uC11E\\uC5B4 \\uC368\\uB3C4 \\uAD1C\\uCC2E\\uC544\\uC694 (\\uD53C\\uB4DC\\uBC31\\uC5D0\\uC11C \\uC790\\uB3D9\\uC73C\\uB85C \\uC218\\uC815\\uD574\\uB4DC\\uB824\\uC694)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"\\uBB38\\uBC95 \\uC624\\uB958\\uAC00 \\uC788\\uC5B4\\uB3C4 \\uAD1C\\uCC2E\\uC544\\uC694 (\\uBC30\\uC6B0\\uB294 \\uACFC\\uC815\\uC774\\uB2C8\\uAE4C\\uC694!)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"\\uD559\\uC2B5 \\uC815\\uB9AC\\uB97C \\uAF2D \\uC791\\uC131\\uD574\\uBCF4\\uC138\\uC694 (\\uAE30\\uC5B5\\uC5D0 \\uC624\\uB798 \\uB0A8\\uC544\\uC694)\"})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-4 bg-green-50 rounded-lg\",children:/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-green-800\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDCA1 \\uD559\\uC2B5 \\uC870\\uC5B8:\"}),\" \\uB9E4\\uC77C \\uC870\\uAE08\\uC529\\uC774\\uB77C\\uB3C4 \\uAFB8\\uC900\\uD788 \\uC791\\uC131\\uD558\\uB294 \\uAC83\\uC774 \\uAC00\\uC7A5 \\uC911\\uC694\\uD574\\uC694. \\uC624\\uB298 \\uBC30\\uC6B4 \\uB0B4\\uC6A9\\uC744 \\uB0B4\\uC77C \\uC77C\\uAE30\\uC5D0 \\uC801\\uC6A9\\uD574\\uBCF4\\uB294 \\uAC83\\uB3C4 \\uC88B\\uC740 \\uBC29\\uBC95\\uC774\\uC5D0\\uC694!\"]})})]})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","Login","jsx","_jsx","jsxs","_jsxs","App","user","setUser","getTodayDate","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","selectedDate","setSelectedDate","mood","setMood","customMood","setCustomMood","diaryEntry","setDiaryEntry","feedback","setFeedback","diaryEntries","setDiaryEntries","showCustomMoodInput","setShowCustomMoodInput","learningSummary","setLearningSummary","savedUser","localStorage","getItem","JSON","parse","userKey","nickname","savedEntries","_parsedEntries$select","parsedEntries","handleLogin","userData","setItem","stringify","handleLogout","removeItem","onLogin","moods","name","emoji","saveEntries","entries","e","console","warn","detectKoreanWords","text","koreanRegex","words","split","koreanWords","forEach","word","cleanWord","replace","test","length","push","suggestEnglishEquivalent","koreanWord","dictionary","analyzeSentence","sentence","index","feedbackItems","processedSentence","trim","originalSentence","hasChanges","reasons","englishEquivalent","toInfinitiveErrors","Object","_ref","incorrect","correct","regex","RegExp","contextBasedTenseFixes","_ref2","toLowerCase","charAt","toUpperCase","slice","conjunctions","firstWord","includes","shift","join","commaIndex","indexOf","afterComma","substring","irregularPastForms","_ref3","present","past","match","timeIndicators","hasTimeIndicator","some","indicator","hasToDoPattern","feelingAdjectives","_ref4","ingForm","edForm","informalToFormal","_ref5","informal","formal","longSentenceWords","breakPoint","Math","floor","firstPart","secondPart","commonNouns","noun","noArticleContexts","hasNoArticleContext","context","countableNouns","beforeNoun","afterNoun","hasArticle","isPlural","vowelSound","article","original","suggestion","reason","generateFeedback","sentences","filter","allFeedback","contextualSuggestions","generateContextualSuggestions","suggestions","lowerText","s","sentenceStarts","map","startCounts","start","repetitiveStart","find","_ref6","count","wordCounts","overusedWords","_ref7","alternatives","getWordAlternatives","handleSubmit","preventDefault","currentMood","alert","newEntry","entry","updatedEntries","handleDateChange","date","handleMoodSelect","selectedMood","handleCustomMood","handleLearningSummaryChange","target","value","renderCalendar","today","firstDay","lastDay","startDate","setDate","getDay","days","currentDate","i","dateStr","hasEntry","className","onClick","children","moodItem","type","onChange","placeholder","toLocaleDateString","weekday","onSubmit","style","fontFamily","item"],"sources":["/Users/jihyunlee/Desktop/커서AI(영어일기버전2)/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Login from \"./Login\";\n\nconst App = () => {\n  // 모든 Hook을 최상단에서 호출\n  const [user, setUser] = useState(null);\n  \n  // 한국 시간 기준으로 오늘 날짜 계산\n  const getTodayDate = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  \n  const [selectedDate, setSelectedDate] = useState(getTodayDate());\n  const [mood, setMood] = useState('');\n  const [customMood, setCustomMood] = useState('');\n  const [diaryEntry, setDiaryEntry] = useState('');\n  const [feedback, setFeedback] = useState([]);\n  const [diaryEntries, setDiaryEntries] = useState({});\n  const [showCustomMoodInput, setShowCustomMoodInput] = useState(false);\n  const [learningSummary, setLearningSummary] = useState('');\n\n  // 로그인 상태 확인\n  useEffect(() => {\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n  }, []);\n\n  // Load saved entries from localStorage\n  useEffect(() => {\n    if (user) { // 로그인된 상태에서만 실행\n      const userKey = `diaryEntries_${user.nickname}`;\n      const savedEntries = localStorage.getItem(userKey);\n      if (savedEntries) {\n        const parsedEntries = JSON.parse(savedEntries);\n        setDiaryEntries(parsedEntries);\n        // 현재 선택된 날짜의 데이터만 로드\n        if (parsedEntries[selectedDate]?.learningSummary) {\n          setLearningSummary(parsedEntries[selectedDate].learningSummary);\n        }\n      } else {\n        // 새로운 사용자의 경우 빈 객체로 초기화\n        setDiaryEntries({});\n        setLearningSummary('');\n      }\n    }\n  }, [user, selectedDate]); // selectedDate 의존성 다시 추가\n\n  // 로그인 핸들러\n  const handleLogin = (userData) => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  // 로그아웃 핸들러\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n    // 사용자별 데이터는 유지 (다시 로그인할 수 있도록)\n  };\n\n  // 로그인 상태가 아니면 로그인 화면 표시\n  if (!user) {\n    return <Login onLogin={handleLogin} />;\n  }\n\n  const moods = [\n    { name: 'Happy', emoji: '😊' },\n    { name: 'Sad', emoji: '😢' },\n    { name: 'Excited', emoji: '🎉' },\n    { name: 'Anxious', emoji: '😰' },\n    { name: 'Calm', emoji: '🧘' },\n    { name: 'Stressed', emoji: '😫' },\n    { name: 'Grateful', emoji: '🙏' },\n    { name: 'Tired', emoji: '😴' },\n    { name: 'Energetic', emoji: '⚡' },\n    { name: 'Hopeful', emoji: '🌟' },\n    { name: 'Frustrated', emoji: '😤' },\n    { name: 'Content', emoji: '😌' },\n    { name: 'Lonely', emoji: '😔' },\n    { name: 'Inspired', emoji: '💡' },\n    { name: 'Bored', emoji: '🥱' },\n    { name: 'Confident', emoji: '💪' },\n    { name: 'Nervous', emoji: '😬' },\n    { name: 'Peaceful', emoji: '🕊️' },\n    { name: 'Overwhelmed', emoji: '😵' },\n    { name: 'Curious', emoji: '🔍' },\n    { name: 'Relieved', emoji: '😅' },\n    { name: 'Disappointed', emoji: '😞' },\n    { name: 'Proud', emoji: '🏆' },\n    { name: 'Ashamed', emoji: '😳' },\n    { name: 'Optimistic', emoji: '☀️' },\n    { name: 'Pessimistic', emoji: '🌧️' },\n    { name: 'Motivated', emoji: '🚀' },\n    { name: 'Drained', emoji: '🔋' },\n    { name: 'Playful', emoji: '🎈' },\n    { name: 'Serious', emoji: '👔' }\n  ];\n\n  // Save entries to localStorage with user-specific key\n  const saveEntries = (entries) => {\n    setDiaryEntries(entries);\n    try {\n      const userKey = `diaryEntries_${user.nickname}`;\n      localStorage.setItem(userKey, JSON.stringify(entries));\n    } catch (e) {\n      console.warn('Could not save to localStorage', e);\n    }\n  };\n\n  const detectKoreanWords = (text) => {\n    const koreanRegex = /[\\uAC00-\\uD7A3]/;\n    const words = text.split(/\\s+/);\n    const koreanWords = [];\n    \n    words.forEach(word => {\n      const cleanWord = word.replace(/[.,!?;:()\"'-]/g, '');\n      if (koreanRegex.test(cleanWord) && cleanWord.length > 1) {\n        koreanWords.push(cleanWord);\n      }\n    });\n    \n    return koreanWords;\n  };\n\n  const suggestEnglishEquivalent = (koreanWord) => {\n    const dictionary = {\n      '평영': 'breaststroke',\n      '배영': 'backstroke',\n      '자유형': 'freestyle',\n      '접영': 'butterfly stroke',\n      '밥': 'meal',\n      '점심': 'lunch',\n      '아침': 'breakfast',\n      '저녁': 'dinner',\n      '학교': 'school',\n      '회사': 'office',\n      '친구': 'friend',\n      '가족': 'family',\n      '엄마': 'mom',\n      '아빠': 'dad',\n      '형': 'older brother',\n      '누나': 'older sister',\n      '오빠': 'older brother (female speaker)',\n      '언니': 'older sister (female speaker)',\n      '선생님': 'teacher',\n      '학생': 'student',\n      '운동': 'exercise',\n      '공부': 'study',\n      '놀이': 'play',\n      '여행': 'trip',\n      '휴가': 'vacation',\n      '생일': 'birthday',\n      '결혼': 'marriage',\n      '이별': 'breakup',\n      '사랑': 'love',\n      '기쁨': 'joy',\n      '슬픔': 'sadness',\n      '화남': 'anger',\n      '두려움': 'fear'\n    };\n    \n    return dictionary[koreanWord] || null;\n  };\n\n  const analyzeSentence = (sentence, index) => {\n    const feedbackItems = [];\n    let processedSentence = sentence.trim();\n    \n    if (!processedSentence) return feedbackItems;\n    \n    const originalSentence = processedSentence;\n    let hasChanges = false;\n    let reasons = []; // 배열로 변경하여 각 오류별로 구분\n    \n    // 1. Check for Korean words in English text\n    const koreanWords = detectKoreanWords(processedSentence);\n    if (koreanWords.length > 0) {\n      koreanWords.forEach(koreanWord => {\n        const englishEquivalent = suggestEnglishEquivalent(koreanWord);\n        if (englishEquivalent) {\n          processedSentence = processedSentence.replace(koreanWord, englishEquivalent);\n          hasChanges = true;\n          reasons.push(`• '${koreanWord}'을(를) '${englishEquivalent}'로 바꾸세요.\\n  영어 일기에서는 영어 표현을 사용하는 것이 좋아요.`);\n        } else {\n          reasons.push(`• '${koreanWord}'은(는) 한국어 단어예요.\\n  영어 표현을 찾아서 사용해보세요.`);\n        }\n      });\n    }\n    \n    // 2. Fix \"to do\" grammar errors (to did, to went, etc.)\n    const toInfinitiveErrors = {\n      'to did': 'to do',\n      'to went': 'to go',\n      'to saw': 'to see',\n      'to ate': 'to eat',\n      'to drank': 'to drink',\n      'to wrote': 'to write',\n      'to slept': 'to sleep',\n      'to felt': 'to feel',\n      'to bought': 'to buy',\n      'to brought': 'to bring',\n      'to thought': 'to think',\n      'to caught': 'to catch',\n      'to knew': 'to know',\n      'to took': 'to take',\n      'to came': 'to come'\n    };\n    \n    Object.entries(toInfinitiveErrors).forEach(([incorrect, correct]) => {\n      const regex = new RegExp(`\\\\b${incorrect}\\\\b`, 'gi');\n      if (regex.test(processedSentence)) {\n        processedSentence = processedSentence.replace(regex, correct);\n        hasChanges = true;\n        reasons.push(`• '${incorrect}' → '${correct}': 'to' 뒤에는 동사의 원형을 사용해야 해요.\\n  예: to do, to go, to see, to eat`);\n      }\n    });\n    \n    // 3. Fix common verb tense errors in context (but avoid affecting \"to do\" patterns)\n    const contextBasedTenseFixes = {\n      'I am go': 'I am going',\n      'I am went': 'I went',\n      'I am do': 'I am doing',\n      'I am did': 'I did',\n      'I am eat': 'I am eating',\n      'I am ate': 'I ate',\n      'I am see': 'I am seeing',\n      'I am saw': 'I saw',\n      'I am have': 'I have',\n      'I am had': 'I had',\n      'I am get': 'I am getting',\n      'I am got': 'I got',\n      'I am make': 'I am making',\n      'I am made': 'I made',\n      'I am take': 'I am taking',\n      'I am took': 'I took',\n      'I am come': 'I am coming',\n      'I am came': 'I came'\n    };\n    \n    Object.entries(contextBasedTenseFixes).forEach(([incorrect, correct]) => {\n      const regex = new RegExp(`\\\\b${incorrect}\\\\b`, 'gi');\n      if (regex.test(processedSentence)) {\n        processedSentence = processedSentence.replace(regex, correct);\n        hasChanges = true;\n        reasons.push(`• '${incorrect}' → '${correct}': 'am' 뒤에는 동사의 -ing 형태나 과거형을 사용해야 해요.\\n  현재진행형: I am going, I am eating\\n  과거형: I went, I ate`);\n      }\n    });\n    \n    // 4. Check if sentence starts with lowercase letter\n    if (processedSentence.length > 0 && processedSentence[0] === processedSentence[0].toLowerCase() && \n        /^[a-z]/.test(processedSentence)) {\n      processedSentence = processedSentence.charAt(0).toUpperCase() + processedSentence.slice(1);\n      hasChanges = true;\n      reasons.push(`• 문장은 대문자로 시작해야 해요.\\n  예: \"i went to school\" → \"I went to school\"`);\n    }\n    \n    // 5. Check if sentence starts with conjunction\n    const conjunctions = ['and', 'but', 'or', 'so', 'because', 'although', 'though', 'since', 'while'];\n    const firstWord = processedSentence.split(' ')[0].toLowerCase().replace(/[.,!?;:]/g, '');\n    \n    if (conjunctions.includes(firstWord)) {\n      const words = processedSentence.split(' ');\n      words.shift();\n      processedSentence = words.join(' ');\n      if (processedSentence.length > 0) {\n        processedSentence = processedSentence.charAt(0).toUpperCase() + processedSentence.slice(1);\n      }\n      hasChanges = true;\n      reasons.push(`• 문장을 접속사('${firstWord}')로 시작하지 마세요.\\n  접속사는 두 문장을 연결할 때 사용해요.\\n  예: \"I was tired. So I went to bed early.\"`);\n    }\n    \n    // 6. Check for comma splice\n    if (processedSentence.includes(',') && \n        (processedSentence.includes(' I ') || processedSentence.includes(' He ') || \n         processedSentence.includes(' She ') || processedSentence.includes(' It ') ||\n         processedSentence.includes(' We ') || processedSentence.includes(' They '))) {\n      const commaIndex = processedSentence.indexOf(',');\n      const afterComma = processedSentence.substring(commaIndex + 1).trim();\n      \n      if (afterComma.length > 0 && /^[A-Z][a-z]/.test(afterComma)) {\n        processedSentence = processedSentence.substring(0, commaIndex) + '. ' + \n                          afterComma.charAt(0).toUpperCase() + afterComma.slice(1);\n        hasChanges = true;\n        reasons.push(`• 쉼표로 두 개의 완전한 문장을 연결하지 마세요.\\n  마침표로 나누거나 접속사를 사용하세요.\\n  예: \"I was tired, I went to bed\" → \"I was tired. I went to bed\"`);\n      }\n    }\n    \n    // 7. Check for missing space after punctuation\n    if (/[.,!?;:][a-zA-Z]/.test(processedSentence)) {\n      processedSentence = processedSentence.replace(/([.,!?;:])([a-zA-Z])/g, '$1 $2');\n      hasChanges = true;\n      reasons.push(`• 구두점 뒤에는 공백을 넣어야 해요.\\n  예: \"I went to school.It was fun.\" → \"I went to school. It was fun.\"`);\n    }\n    \n    // 8. Check for inappropriate use of present tense for past events\n    const irregularPastForms = {\n      'go': 'went', 'see': 'saw', 'do': 'did', 'have': 'had', 'get': 'got', \n      'make': 'made', 'say': 'said', 'know': 'knew', 'take': 'took', 'come': 'came',\n      'eat': 'ate', 'drink': 'drank', 'write': 'wrote', 'read': 'read', 'sleep': 'slept',\n      'feel': 'felt', 'buy': 'bought', 'bring': 'brought', 'think': 'thought', 'catch': 'caught'\n    };\n    \n    Object.entries(irregularPastForms).forEach(([present, past]) => {\n      // \"to do\" 패턴을 건드리지 않도록 예외 처리\n      const regex = new RegExp(`\\\\b${present}\\\\b`, 'gi');\n      if (regex.test(processedSentence) && !processedSentence.match(/\\b(am|is|are|was|were|been|being)\\b/gi)) {\n        const timeIndicators = ['today', 'yesterday', 'morning', 'afternoon', 'evening', 'night', 'last', 'ago'];\n        const hasTimeIndicator = timeIndicators.some(indicator => \n          processedSentence.toLowerCase().includes(indicator)\n        );\n        \n        // \"to do\" 패턴이 있는 경우 건드리지 않음\n        const hasToDoPattern = processedSentence.toLowerCase().includes(`to ${present}`);\n        \n        if ((hasTimeIndicator || !processedSentence.match(/\\b(now|currently|right now|these days)\\b/gi)) && !hasToDoPattern) {\n          processedSentence = processedSentence.replace(regex, past);\n          hasChanges = true;\n          reasons.push(`• 과거 일을 서술할 때는 '${present}' → '${past}'를 사용하세요.\\n  일기에서는 일반적으로 과거형을 사용해요.\\n  예: \"I go to school\" → \"I went to school\"`);\n        }\n      }\n    });\n    \n    // 9. Check for incorrect adjective usage with feelings\n    const feelingAdjectives = {\n      'frustrating': 'frustrated',\n      'exciting': 'excited',\n      'boring': 'bored',\n      'tiring': 'tired',\n      'surprising': 'surprised',\n      'interesting': 'interested',\n      'confusing': 'confused',\n      'amazing': 'amazed',\n      'shocking': 'shocked',\n      'disappointing': 'disappointed',\n      'satisfying': 'satisfied',\n      'worrying': 'worried',\n      'terrifying': 'terrified',\n      'pleasing': 'pleased',\n      'annoying': 'annoyed'\n    };\n    \n    Object.entries(feelingAdjectives).forEach(([ingForm, edForm]) => {\n      const regex = new RegExp(`\\\\bI\\\\s+(am|was|feel|felt)\\\\s+${ingForm}\\\\b`, 'gi');\n      if (regex.test(processedSentence)) {\n        processedSentence = processedSentence.replace(regex, (match) => {\n          return match.replace(new RegExp(`${ingForm}`, 'i'), edForm);\n        });\n        hasChanges = true;\n        reasons.push(`• 기분 표현에는 '${ingForm}' → '${edForm}'를 사용하세요.\\n  -ing: 어떤 것이 그 기분을 주는지 (The movie was exciting)\\n  -ed: 당신이 그 기분을 느낄 때 (I was excited)`);\n      }\n    });\n    \n    // 10. Replace informal expressions with more formal ones\n    const informalToFormal = {\n      'a lot': 'significantly',\n      'kind of': 'somewhat',\n      'sort of': 'rather',\n      'gonna': 'going to',\n      'wanna': 'want to',\n      'gotta': 'have to',\n      'pretty': 'quite',\n      'really': 'very',\n      'very very': 'extremely',\n      'super': 'extremely',\n      'awesome': 'excellent',\n      'cool': 'great',\n      'bad': 'poor',\n      'stuff': 'things',\n      'get': 'obtain or become',\n      'make': 'create or cause'\n    };\n    \n    Object.entries(informalToFormal).forEach(([informal, formal]) => {\n      const regex = new RegExp(`\\\\b${informal}\\\\b`, 'gi');\n      if (regex.test(processedSentence)) {\n        processedSentence = processedSentence.replace(regex, formal);\n        hasChanges = true;\n        reasons.push(`• '${informal}' → '${formal}': 더 정교한 표현을 사용하세요.\\n  비형식적 표현보다 형식적인 표현이 일기에 적합해요.`);\n      }\n    });\n    \n    // 11. Improve vague expressions (moved to end to avoid conflicts)\n    if (processedSentence.toLowerCase().includes('thing') || processedSentence.toLowerCase().includes('things')) {\n      processedSentence = processedSentence.replace(/\\bthing\\b/gi, 'item or activity');\n      processedSentence = processedSentence.replace(/\\bthings\\b/gi, 'various activities or items');\n      hasChanges = true;\n      reasons.push(`• 'thing/things' → 더 구체적인 표현을 사용하세요.\\n  모호한 표현보다 구체적인 설명이 좋아요.\\n  예: \"I did many things\" → \"I did various activities\"`);\n    }\n    \n    // 12. Fix run-on sentences\n    const longSentenceWords = processedSentence.split(' ');\n    if (longSentenceWords.length > 25 && !processedSentence.includes('.')) {\n      const breakPoint = Math.floor(longSentenceWords.length * 0.6);\n      const firstPart = longSentenceWords.slice(0, breakPoint).join(' ');\n      const secondPart = longSentenceWords.slice(breakPoint).join(' ');\n      processedSentence = `${firstPart}. ${secondPart.charAt(0).toUpperCase() + secondPart.slice(1)}`;\n      hasChanges = true;\n      reasons.push(`• 긴 문장을 두 개로 나누세요.\\n  15-20단어를 넘는 문장은 피하는 것이 좋아요.\\n  문장을 나누면 더 명확하게 표현할 수 있어요.`);\n    }\n    \n    // 13. Check for common article errors\n    const commonNouns = ['school', 'work', 'home', 'bed', 'hospital', 'church', 'college', 'university'];\n    commonNouns.forEach(noun => {\n      const regex = new RegExp(`\\\\bthe\\\\s+${noun}\\\\b`, 'gi');\n      if (regex.test(processedSentence) && !processedSentence.match(/\\b(in|at|to|from) the\\b/gi)) {\n        const noArticleContexts = ['go to', 'be at', 'come from', 'arrive at'];\n        const hasNoArticleContext = noArticleContexts.some(context => \n          processedSentence.toLowerCase().includes(context)\n        );\n        \n        if (hasNoArticleContext) {\n          processedSentence = processedSentence.replace(regex, noun);\n          hasChanges = true;\n          reasons.push(`• 'the ${noun}' → '${noun}': 일부 장소명사는 'the' 없이 사용해요.\\n  예: go to school, be at work, go home`);\n        }\n      }\n    });\n    \n    // 14. Check for missing articles before singular countable nouns\n    const countableNouns = ['book', 'movie', 'car', 'house', 'friend', 'teacher', 'student', 'dog', 'cat', 'phone', 'computer', 'table', 'chair', 'window', 'door'];\n    countableNouns.forEach(noun => {\n      const regex = new RegExp(`\\\\b${noun}\\\\b`, 'gi');\n      if (regex.test(processedSentence)) {\n        const beforeNoun = processedSentence.substring(0, processedSentence.toLowerCase().indexOf(noun.toLowerCase()));\n        const afterNoun = processedSentence.substring(processedSentence.toLowerCase().indexOf(noun.toLowerCase()) + noun.length);\n        \n        // Check if there's already an article before the noun\n        const hasArticle = /\\b(a|an|the|my|your|his|her|its|our|their)\\s+$/i.test(beforeNoun);\n        const isPlural = /\\b\\w+s\\b/i.test(processedSentence);\n        \n        if (!hasArticle && !isPlural && !beforeNoun.match(/\\b(in|at|on|to|from|with|by|for|of)\\s+$/i)) {\n          const vowelSound = /^[aeiou]/i.test(noun);\n          const article = vowelSound ? 'an' : 'a';\n          processedSentence = processedSentence.replace(regex, `${article} ${noun}`);\n          hasChanges = true;\n          reasons.push(`• '${noun}' → '${article} ${noun}': 단수 가산명사 앞에는 관사를 사용하세요.\\n  예: a book, an apple, the car`);\n        }\n      }\n    });\n    \n    // 15. Check for double negatives\n    if (processedSentence.toLowerCase().includes('not') && \n        (processedSentence.toLowerCase().includes('no') || processedSentence.toLowerCase().includes('never') || \n         processedSentence.toLowerCase().includes('nothing') || processedSentence.toLowerCase().includes('nobody'))) {\n      processedSentence = processedSentence.replace(/\\bnot\\b/gi, '');\n      processedSentence = processedSentence.replace(/\\s+/g, ' ').trim();\n      hasChanges = true;\n      reasons.push(`• 이중 부정을 피하세요.\\n  'not'과 'no/never' 등을 함께 사용하지 마세요.\\n  예: \"I don't have no money\" → \"I have no money\"`);\n    }\n    \n    // 16. If we've made changes, add feedback item\n    if (hasChanges) {\n      feedbackItems.push({\n        original: originalSentence,\n        suggestion: processedSentence,\n        reason: reasons.join('\\n\\n') // 각 피드백 사이에 빈 줄 추가\n      });\n    } \n    // If no changes but sentence is reasonably long, provide constructive feedback\n    else if (originalSentence.length > 15) {\n      feedbackItems.push({\n        original: originalSentence,\n        suggestion: originalSentence,\n        reason: \"• 문장이 아주 잘 작성되었어요!\\n\\n• 더 나은 표현을 위해 다음을 시도해보세요:\\n  - 더 정교한 어휘 사용\\n  - 다양한 문장 구조 사용\\n  - 구체적인 설명 추가\"\n      });\n    }\n    \n    return feedbackItems;\n  };\n\n  const generateFeedback = (text) => {\n    if (!text.trim()) return [];\n    \n    const sentences = text.split(/[.!?]+/).filter(sentence => sentence.trim().length > 0);\n    const allFeedback = [];\n    \n    sentences.forEach((sentence, index) => {\n      const feedback = analyzeSentence(sentence, index);\n      allFeedback.push(...feedback);\n    });\n    \n    // Add contextual suggestions based on the overall text\n    if (allFeedback.length === 0 && text.length > 50) {\n      const contextualSuggestions = generateContextualSuggestions(text);\n      allFeedback.push(...contextualSuggestions);\n    }\n    \n    return allFeedback.slice(0, 5); // Limit to 5 feedback items\n  };\n\n  const generateContextualSuggestions = (text) => {\n    const suggestions = [];\n    const lowerText = text.toLowerCase();\n    \n    // Check for repetitive sentence structures\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);\n    const sentenceStarts = sentences.map(s => s.trim().split(' ')[0].toLowerCase());\n    const startCounts = {};\n    \n    sentenceStarts.forEach(start => {\n      startCounts[start] = (startCounts[start] || 0) + 1;\n    });\n    \n    const repetitiveStart = Object.entries(startCounts).find(([word, count]) => count > 2);\n    if (repetitiveStart) {\n      suggestions.push({\n        original: `문장들이 '${repetitiveStart[0]}'로 시작하는 경우가 많아요.`,\n        suggestion: \"다양한 문장 시작을 시도해보세요: 'I', 'The', 'It', 'There', 'This', 'That' 등을 활용하면 더 흥미로운 글이 됩니다.\",\n        reason: \"• 같은 단어로 문장을 시작하면 글의 흐름이 단조로워져요.\\n\\n• 다양한 문장 구조를 사용하면 더 자연스럽고 읽기 쉬운 글이 됩니다.\\n\\n• 예시:\\n  - I went to school today.\\n  - The weather was beautiful.\\n  - It was a great day.\\n  - There were many people.\\n  - This experience taught me a lot.\"\n      });\n    }\n    \n    // Check for vocabulary variety\n    const words = lowerText.split(/\\s+/).filter(word => word.length > 3);\n    const wordCounts = {};\n    words.forEach(word => {\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n    \n    const overusedWords = Object.entries(wordCounts).filter(([word, count]) => count > 3);\n    if (overusedWords.length > 0) {\n      const word = overusedWords[0][0];\n      const alternatives = getWordAlternatives(word);\n      if (alternatives.length > 0) {\n        suggestions.push({\n          original: `'${word}' 단어를 여러 번 사용했어요.`,\n          suggestion: `다른 표현을 시도해보세요: ${alternatives.join(', ')}`,\n          reason: \"• 같은 단어를 반복 사용하면 글의 표현력이 떨어져요.\\n\\n• 다양한 동의어를 사용하면 더 풍부한 표현이 가능합니다.\\n\\n• 문맥에 맞는 적절한 단어를 선택하세요.\"\n        });\n      }\n    }\n    \n    // Check for text length and structure\n    if (text.length < 100) {\n      suggestions.push({\n        original: \"일기가 조금 짧아요.\",\n        suggestion: \"더 자세한 설명을 추가해보세요: 언제, 어디서, 누구와, 무엇을, 어떻게, 왜에 대한 정보를 포함하면 더 풍부한 일기가 됩니다.\",\n        reason: \"• 짧은 일기보다는 구체적인 세부사항을 포함한 긴 일기가 영어 학습에 더 도움이 됩니다.\\n\\n• 5W1H(언제, 어디서, 누구와, 무엇을, 어떻게, 왜)를 고려해서 작성해보세요.\\n\\n• 예시:\\n  - 언제: Yesterday morning, Last weekend\\n  - 어디서: at the park, in the library\\n  - 누구와: with my friends, alone\\n  - 무엇을: studied English, watched a movie\\n  - 어떻게: carefully, quickly, slowly\\n  - 왜: because I wanted to learn, since it was interesting\"\n      });\n    }\n    \n    return suggestions;\n  };\n\n  const getWordAlternatives = (word) => {\n    const alternatives = {\n      'good': ['excellent', 'great', 'wonderful', 'fantastic', 'amazing', 'outstanding'],\n      'bad': ['terrible', 'awful', 'horrible', 'dreadful', 'poor', 'disappointing'],\n      'big': ['large', 'huge', 'enormous', 'massive', 'gigantic', 'substantial'],\n      'small': ['tiny', 'little', 'miniature', 'petite', 'compact', 'modest'],\n      'happy': ['joyful', 'delighted', 'pleased', 'content', 'cheerful', 'elated'],\n      'sad': ['unhappy', 'depressed', 'melancholy', 'gloomy', 'sorrowful', 'down'],\n      'tired': ['exhausted', 'weary', 'fatigued', 'drained', 'worn out', 'sleepy'],\n      'angry': ['furious', 'mad', 'irritated', 'annoyed', 'upset', 'frustrated'],\n      'scared': ['afraid', 'frightened', 'terrified', 'panicked', 'nervous', 'worried'],\n      'surprised': ['shocked', 'amazed', 'astonished', 'stunned', 'bewildered', 'startled'],\n      'like': ['enjoy', 'love', 'appreciate', 'adore', 'fancy', 'prefer'],\n      'dislike': ['hate', 'detest', 'loathe', 'abhor', 'despise', 'can\\'t stand'],\n      'say': ['tell', 'speak', 'talk', 'mention', 'explain', 'describe'],\n      'go': ['visit', 'travel', 'head', 'move', 'proceed', 'journey'],\n      'come': ['arrive', 'reach', 'approach', 'appear', 'show up', 'turn up'],\n      'see': ['watch', 'observe', 'notice', 'spot', 'witness', 'view'],\n      'think': ['believe', 'consider', 'suppose', 'imagine', 'assume', 'feel'],\n      'know': ['understand', 'realize', 'recognize', 'comprehend', 'grasp', 'see'],\n      'want': ['desire', 'wish', 'hope', 'need', 'require', 'would like'],\n      'get': ['obtain', 'receive', 'acquire', 'gain', 'achieve', 'attain']\n    };\n    \n    return alternatives[word] || [];\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const currentMood = customMood || mood;\n    if (!currentMood || !diaryEntry.trim()) {\n      alert('기분을 선택하고 일기 내용을 작성해주세요.');\n      return;\n    }\n\n    const newEntry = {\n      mood: currentMood,\n      entry: diaryEntry,\n      feedback: generateFeedback(diaryEntry),\n      learningSummary: learningSummary\n    };\n\n    const updatedEntries = {\n      ...diaryEntries,\n      [selectedDate]: newEntry\n    };\n    \n    saveEntries(updatedEntries);\n    setFeedback(newEntry.feedback);\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    const entry = diaryEntries[date];\n    if (entry) {\n      setMood(entry.mood);\n      setCustomMood('');\n      setDiaryEntry(entry.entry);\n      setFeedback(entry.feedback || []);\n      setLearningSummary(entry.learningSummary || '');\n    } else {\n      setMood('');\n      setCustomMood('');\n      setDiaryEntry('');\n      setFeedback([]);\n      setLearningSummary('');\n    }\n  };\n\n  const handleMoodSelect = (selectedMood) => {\n    setMood(selectedMood);\n    setCustomMood('');\n    setShowCustomMoodInput(false);\n  };\n\n  const handleCustomMood = () => {\n    setShowCustomMoodInput(true);\n    setMood('');\n  };\n\n  const handleLearningSummaryChange = (e) => {\n    setLearningSummary(e.target.value);\n    if (diaryEntries[selectedDate]) {\n      const updatedEntries = {\n        ...diaryEntries,\n        [selectedDate]: {\n          ...diaryEntries[selectedDate],\n          learningSummary: e.target.value\n        }\n      };\n      saveEntries(updatedEntries);\n    }\n  };\n\n  const renderCalendar = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = today.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const startDate = new Date(firstDay);\n    startDate.setDate(startDate.getDate() - firstDay.getDay());\n    \n    const days = [];\n    const currentDate = new Date(startDate);\n    \n    for (let i = 0; i < 42; i++) {\n      const day = new Date(currentDate);\n      // 한국 시간 기준으로 날짜 문자열 생성\n      const year = day.getFullYear();\n      const month = String(day.getMonth() + 1).padStart(2, '0');\n      const date = String(day.getDate()).padStart(2, '0');\n      const dateStr = `${year}-${month}-${date}`;\n      \n      const hasEntry = diaryEntries[dateStr];\n      \n      days.push(\n        <div\n          key={i}\n          className={`p-2 text-center cursor-pointer rounded transition-all duration-200 ${\n            day.getMonth() === month - 1\n              ? 'text-gray-700 hover:bg-blue-50'\n              : 'text-gray-400'\n          } ${\n            dateStr === selectedDate\n              ? 'bg-blue-500 text-white font-semibold'\n              : hasEntry\n              ? 'bg-green-100 hover:bg-green-200'\n              : 'hover:bg-gray-100'\n          }`}\n          onClick={() => handleDateChange(dateStr)}\n        >\n          <div className=\"text-sm\">{day.getDate()}</div>\n          {hasEntry && (\n            <div className=\"w-1 h-1 bg-green-500 rounded-full mx-auto mt-1\"></div>\n          )}\n        </div>\n      );\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return days;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\">\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <header className=\"text-center mb-8 flex flex-col items-center\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">일기장 📔</h1>\n          <p className=\"text-lg text-gray-600 mb-2\">영어로 일기를 쓰고 친절한 선생님처럼 피드백을 받아보세요</p>\n          <div className=\"flex items-center gap-4 mt-2\">\n            <span className=\"text-blue-700 font-semibold\">{user.nickname}님 환영합니다!</span>\n            <button onClick={handleLogout} className=\"px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 text-sm\">로그아웃</button>\n          </div>\n        </header>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Calendar and Mood Section */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Calendar */}\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">📅 달력</h2>\n              <div className=\"grid grid-cols-7 gap-1 mb-4\">\n                {['일', '월', '화', '수', '목', '금', '토'].map(day => (\n                  <div key={day} className=\"p-2 text-center text-sm font-medium text-gray-500\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              <div className=\"grid grid-cols-7 gap-1\">\n                {renderCalendar()}\n              </div>\n            </div>\n\n            {/* Mood Selection */}\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">😊 오늘의 기분</h2>\n              <div className=\"grid grid-cols-2 gap-2 mb-4 max-h-60 overflow-y-auto\">\n                {moods.map((moodItem) => (\n                  <button\n                    key={moodItem.name}\n                    onClick={() => handleMoodSelect(moodItem.name)}\n                    className={`p-2 text-sm rounded-lg transition-all duration-200 flex items-center gap-2 ${\n                      mood === moodItem.name\n                        ? 'bg-blue-500 text-white font-medium'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    <span className=\"text-lg\">{moodItem.emoji}</span>\n                    <span>{moodItem.name}</span>\n                  </button>\n                ))}\n              </div>\n              <button\n                onClick={handleCustomMood}\n                className=\"w-full p-2 text-sm text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors duration-200 flex items-center justify-center gap-2\"\n              >\n                <span>➕</span> 직접 기분 입력하기\n              </button>\n              \n              {showCustomMoodInput && (\n                <div className=\"mt-4\">\n                  <input\n                    type=\"text\"\n                    value={customMood}\n                    onChange={(e) => setCustomMood(e.target.value)}\n                    placeholder=\"기분을 입력하세요...\"\n                    className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Diary and Feedback Section */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Date Display */}\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">\n                {new Date(selectedDate).toLocaleDateString('ko-KR', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })}\n              </h2>\n              {diaryEntries[selectedDate] && (\n                <div className=\"text-sm text-gray-600\">\n                  기분: <span className=\"font-medium text-blue-600\">{diaryEntries[selectedDate].mood}</span>\n                </div>\n              )}\n            </div>\n\n            {/* Diary Entry */}\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">✏️ 오늘의 일기</h2>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <textarea\n                  value={diaryEntry}\n                  onChange={(e) => setDiaryEntry(e.target.value)}\n                  placeholder={`Today was a great day. \nI went to the park with my friends. \nWe had a wonderful time together.`}\n                  className=\"w-full h-64 p-4 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700 placeholder-gray-400 font-medium\"\n                  style={{ fontFamily: 'Georgia, Cambria, \"Times New Roman\", Times, serif' }}\n                />\n                <div className=\"text-sm text-gray-500\">\n                  일기를 쓸 때 다음을 참고해보세요: 오늘의 기분, 했던 일, 만난 사람, 느낀 점, \n                  내일의 계획 등에 대해 자유롭게 영어로 작성해보세요. 완벽한 문장을 쓰려고 \n                  애쓰기보다는 자유롭게 표현하는 데 집중해보세요!\n                </div>\n                <div className=\"flex justify-end\">\n                  <button\n                    type=\"submit\"\n                    className=\"px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 font-medium flex items-center gap-2\"\n                  >\n                    <span>✅</span> 저장하고 피드백 받기\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            {/* AI Feedback */}\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">🤖 AI 선생님의 피드백</h2>\n              {feedback.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {feedback.map((item, index) => (\n                    <div key={index} className=\"border-l-4 border-blue-400 pl-4 py-3 bg-blue-50 rounded-r-lg\">\n                      <div className=\"mb-3\">\n                        <span className=\"inline-block bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded mb-2\">\n                          💬 피드백 #{index + 1}\n                        </span>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">📝 원문:</span>\n                          <p className=\"text-gray-800 mt-1 bg-white p-2 rounded border\">{item.original}</p>\n                        </div>\n                      </div>\n                      <div className=\"mb-3\">\n                        <span className=\"font-medium text-gray-700\">✨ 개선 제안:</span>\n                        <p className=\"text-green-800 mt-1 bg-white p-2 rounded border font-medium\">{item.suggestion}</p>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-gray-700\">📘 상세 설명:</span>\n                        <p className=\"text-gray-700 mt-1 text-sm leading-relaxed bg-white p-3 rounded border border-gray-200 whitespace-pre-line\">\n                          {item.reason}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-gray-500 italic text-center py-8 bg-gray-50 rounded-lg\">\n                  <div className=\"text-4xl mb-2\">👋</div>\n                  일기를 작성하고 \"저장하고 피드백 받기\" 버튼을 클릭하면,<br />\n                  친절한 AI 선생님이 문장별로 상세한 피드백을 제공해드려요!\n                </div>\n              )}\n            </div>\n\n            {/* Learning Summary */}\n            <div className=\"bg-white rounded-xl shadow-lg p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">🌟 오늘의 학습 정리</h2>\n              <p className=\"text-gray-600 mb-4 text-sm\">\n                오늘 일기 작성과 피드백을 통해 배운 내용을 간단히 정리해보세요. 이는 당신의 학습 여정을 되돌아보는 데 큰 도움이 됩니다.\n              </p>\n              <textarea\n                value={learningSummary}\n                onChange={handleLearningSummaryChange}\n                placeholder=\"예: 오늘은 과거형 동사 사용법과 문장을 자연스럽게 연결하는 방법을 배웠어요. 특히 'and'로 문장을 시작하는 것을 피하고, 대신 마침표나 접속사를 사용하는 것이 더 자연스럽다는 것을 알게 되었어요.\"\n                className=\"w-full h-32 p-4 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700 placeholder-gray-400\"\n              />\n              <p className=\"text-xs text-gray-500 mt-2\">\n                💡 팁: 구체적인 예시와 함께 정리하면 기억에 더 오래 남아요!\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-8 bg-white rounded-xl shadow-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">✨ 사용 팁:</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-semibold text-blue-600 mb-2\">✓ 기분 선택:</h4>\n              <ul className=\"list-disc list-inside text-gray-600 space-y-1\">\n                <li>각 감정 옆에 해당하는 이모지가 있어요</li>\n                <li>기분이 정확히 맞지 않으면 직접 입력할 수 있어요</li>\n                <li>달력에서 초록색 점은 일기를 쓴 날짜를 의미해요</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-blue-600 mb-2\">✓ 일기 작성:</h4>\n              <ul className=\"list-disc list-inside text-gray-600 space-y-1\">\n                <li>한글과 영어를 섞어 써도 괜찮아요 (피드백에서 자동으로 수정해드려요)</li>\n                <li>문법 오류가 있어도 괜찮아요 (배우는 과정이니까요!)</li>\n                <li>학습 정리를 꼭 작성해보세요 (기억에 오래 남아요)</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"mt-4 p-4 bg-green-50 rounded-lg\">\n            <p className=\"text-sm text-green-800\">\n              <strong>💡 학습 조언:</strong> 매일 조금씩이라도 꾸준히 작성하는 것이 가장 중요해요. \n              오늘 배운 내용을 내일 일기에 적용해보는 것도 좋은 방법이에요!\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}