{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// API 요청 헬퍼 함수\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      }),\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || data.message || 'API 요청 중 오류가 발생했습니다');\n    }\n    return data;\n  } catch (error) {\n    console.error('API 요청 오류:', error);\n    throw error;\n  }\n};\n\n// 인증 관련 API\nexport const authAPI = {\n  // 회원가입\n  register: ({\n    nickname,\n    password\n  }) => apiRequest('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify({\n      nickname,\n      password\n    })\n  }),\n  // 로그인\n  login: ({\n    nickname,\n    password\n  }) => apiRequest('/auth/login', {\n    method: 'POST',\n    body: JSON.stringify({\n      nickname,\n      password\n    })\n  }),\n  // 사용자 정보 조회\n  getProfile: () => apiRequest('/auth/me'),\n  // 프로필 업데이트\n  updateProfile: profileData => apiRequest('/auth/profile', {\n    method: 'PUT',\n    body: JSON.stringify(profileData)\n  }),\n  // 비밀번호 변경\n  changePassword: passwordData => apiRequest('/auth/password', {\n    method: 'PUT',\n    body: JSON.stringify(passwordData)\n  })\n};\n\n// 일기 관련 API\nexport const diaryAPI = {\n  // 일기 목록 조회\n  getEntries: (year, month) => {\n    const params = new URLSearchParams();\n    if (year) params.append('year', year);\n    if (month) params.append('month', month);\n    return apiRequest(`/diary/entries?${params.toString()}`);\n  },\n  // 특정 날짜 일기 조회\n  getEntry: date => apiRequest(`/diary/entries/${date}`),\n  // 일기 작성/수정\n  saveEntry: entryData => apiRequest('/diary/entries', {\n    method: 'POST',\n    body: JSON.stringify(entryData)\n  }),\n  // 일기 삭제\n  deleteEntry: date => apiRequest(`/diary/entries/${date}`, {\n    method: 'DELETE'\n  }),\n  // 통계 조회\n  getStats: (period = 'all') => apiRequest(`/diary/stats?period=${period}`),\n  // 학습 정리 업데이트\n  updateSummary: (date, summary) => apiRequest(`/diary/entries/${date}/summary`, {\n    method: 'PUT',\n    body: JSON.stringify({\n      learningSummary: summary\n    })\n  })\n};\n\n// 토큰 관리\nexport const tokenManager = {\n  // 토큰 저장\n  setToken: token => {\n    localStorage.setItem('token', token);\n  },\n  // 토큰 가져오기\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  // 토큰 제거\n  removeToken: () => {\n    localStorage.removeItem('token');\n  },\n  // 토큰 유효성 확인\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now();\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 에러 처리\nexport const handleAPIError = error => {\n  if (error.message.includes('401') || error.message.includes('토큰')) {\n    tokenManager.removeToken();\n    window.location.href = '/login';\n    return '로그인이 필요합니다';\n  }\n  return error.message || '알 수 없는 오류가 발생했습니다';\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","token","localStorage","getItem","config","headers","Authorization","response","fetch","data","json","ok","Error","error","message","console","authAPI","register","nickname","password","method","body","JSON","stringify","login","getProfile","updateProfile","profileData","changePassword","passwordData","diaryAPI","getEntries","year","month","params","URLSearchParams","append","toString","getEntry","date","saveEntry","entryData","deleteEntry","getStats","period","updateSummary","summary","learningSummary","tokenManager","setToken","setItem","getToken","removeToken","removeItem","isTokenValid","payload","parse","atob","split","exp","Date","now","handleAPIError","includes","window","location","href"],"sources":["/Users/jihyunlee/Desktop/커서AI(영어일기버전2)/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// API 요청 헬퍼 함수\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = localStorage.getItem('token');\n  \n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && { Authorization: `Bearer ${token}` }),\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || data.message || 'API 요청 중 오류가 발생했습니다');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('API 요청 오류:', error);\n    throw error;\n  }\n};\n\n// 인증 관련 API\nexport const authAPI = {\n  // 회원가입\n  register: ({ nickname, password }) => \n    apiRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({ nickname, password }),\n    }),\n\n  // 로그인\n  login: ({ nickname, password }) => \n    apiRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ nickname, password }),\n    }),\n\n  // 사용자 정보 조회\n  getProfile: () => \n    apiRequest('/auth/me'),\n\n  // 프로필 업데이트\n  updateProfile: (profileData) => \n    apiRequest('/auth/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData),\n    }),\n\n  // 비밀번호 변경\n  changePassword: (passwordData) => \n    apiRequest('/auth/password', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData),\n    }),\n};\n\n// 일기 관련 API\nexport const diaryAPI = {\n  // 일기 목록 조회\n  getEntries: (year, month) => {\n    const params = new URLSearchParams();\n    if (year) params.append('year', year);\n    if (month) params.append('month', month);\n    \n    return apiRequest(`/diary/entries?${params.toString()}`);\n  },\n\n  // 특정 날짜 일기 조회\n  getEntry: (date) => \n    apiRequest(`/diary/entries/${date}`),\n\n  // 일기 작성/수정\n  saveEntry: (entryData) => \n    apiRequest('/diary/entries', {\n      method: 'POST',\n      body: JSON.stringify(entryData),\n    }),\n\n  // 일기 삭제\n  deleteEntry: (date) => \n    apiRequest(`/diary/entries/${date}`, {\n      method: 'DELETE',\n    }),\n\n  // 통계 조회\n  getStats: (period = 'all') => \n    apiRequest(`/diary/stats?period=${period}`),\n\n  // 학습 정리 업데이트\n  updateSummary: (date, summary) => \n    apiRequest(`/diary/entries/${date}/summary`, {\n      method: 'PUT',\n      body: JSON.stringify({ learningSummary: summary }),\n    }),\n};\n\n// 토큰 관리\nexport const tokenManager = {\n  // 토큰 저장\n  setToken: (token) => {\n    localStorage.setItem('token', token);\n  },\n\n  // 토큰 가져오기\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n\n  // 토큰 제거\n  removeToken: () => {\n    localStorage.removeItem('token');\n  },\n\n  // 토큰 유효성 확인\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    \n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now();\n    } catch (error) {\n      return false;\n    }\n  },\n};\n\n// 에러 처리\nexport const handleAPIError = (error) => {\n  if (error.message.includes('401') || error.message.includes('토큰')) {\n    tokenManager.removeToken();\n    window.location.href = '/login';\n    return '로그인이 필요합니다';\n  }\n  \n  return error.message || '알 수 없는 오류가 발생했습니다';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}